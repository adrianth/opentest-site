(function () {
    var mouseDown = false;
    document.body.onmousedown = function () {
        mouseDown = true;
    }
    document.body.onmouseup = function () {
        mouseDown = false;
    }

    // Pts.namespace(window);
    Pts.quickStart("#banner-bg");
    space.setup({ 'bgcolor': 'transparent' });

    // var form = space.getForm();

    var de = new Delaunay(); // Delaunay is a Group of Pts
    var triangles = []; // store the delaunay triangles
    var cells = []; // store the voronoi cells
    var lastPt = new Pt();


    // A simple function to repel the points if they are too close
    let repel = (size) => {
        for (let k = 0, len = de.length; k < len; k++) {
            for (let i = 0, len = de.length; i < len; i++) {
                if (i !== k) {
                    let d = de[k].$subtract(de[i]);
                    if (d.magnitudeSq() < size * size) {
                        de[k].subtract(d.$divide(-size / 3));
                        de[i].subtract(d.$divide(size / 3));
                    }
                }
            }
        }
    }

    space.add({
        start: (bound) => {
            // Create 20 random points and generate initial tessellations
            de = Create.delaunay(Create.distributeRandom(space.innerBound, 60));
            triangles = de.delaunay();
            cells = de.voronoi();
        },

        animate: (time, ftime) => {
            // draw the cells
            form.strokeOnly("hsl(261, 100%, 20%)", 1).polygons(triangles);
            form.fill("hsl(261, 100%, 40%)").points(de, 2, "circle");
            form.strokeOnly("hsl(261, 100%, 16%)").polygons(cells);
            repel(30);

            // If more than 80 pts are added, do fancy things
            if (de.length >= 80) {
                de[de.length - 1] = space.pointer;
                repel(50);
                triangles = de.delaunay();
                cells = de.voronoi();

                if (mouseDown) {
                    // Guides: Show the neighbor cells of the point nearest to pointer
                    let nearIndex = Polygon.nearestPt(de, space.pointer);
                    de.neighbors(nearIndex, true).map((n) => {
                        form.strokeOnly("hsl(261, 100%, 60%)", 3).polygon(n.triangle);
                        form.strokeOnly("rgba(132, 107, 179, 0.3)", 1).circle(n.circle);
                        form.fillOnly("hsl(261, 100%, 80%)", 1).point(n.circle[0], 2);
                    });
                }
            }
        },

        action: (type, x, y) => {
            // Add up to 100 points on mouse move
            if (type == "move" && de.length < 100) {
                let p = new Pt(x, y);
                if (lastPt.$subtract(p).magnitudeSq() > 400) {
                    lastPt = p;
                    de.push(p);
                    triangles = de.delaunay();
                    cells = de.voronoi();
                }
            }
        }
    });

    space.bindMouse().play();
})();